(clean-environment)
( let ( (x 3) (y '(1 2 3))
        )
        (cons 1 '(4 5))       ; this will be evaluated ; but no use
        (cons x (cdr y))      ; the value of this one is the value of LET
)
x
(let (car '(1 2 3))  ; first argument of 'let' should be a list of pairs 
                         ; moreover, there ought to be a second argument
)
(let ((x 3 4)) 5     ; first argument of LET should be a list of
                         ; pairs ; '(x 3 4)' is not an acceptable pair
)  
(let ((x 3)
        ) 
        5     
)
(let ( ( (car '(x y z)) ; first argument of LET should be a list of pairs
            3              
        )                ; Furthermore, the first element of each 
        )                  ; pair must be a symbol
        5
)
(let ()             ; There should be at least one S-expression following
                    ; the first argument
)                     
(let () 5           
)
(let ( ( ( car '(x y z)) 
            5
        )
        )        
)
(let ( ( x (cons 5) ) ; the problem is not in LET-format
        )
        ( + x x )
)
(let ( ( x (cons 5) ) 
        )
)
(let ((x (1 2 3))) 5)  ; LET-format OK
(let ((x (1 2 3))
        )
)
(exit)
